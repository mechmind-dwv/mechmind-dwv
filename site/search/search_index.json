{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. For full documentation visit mkdocs.org . MechMind Documentation Documentaci\u00f3n de MechBot-2X y sistemas relacionados Welcome to MkDocs","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. For full documentation visit mkdocs.org .","title":"Project layout"},{"location":"#mechmind-documentation","text":"Documentaci\u00f3n de MechBot-2X y sistemas relacionados","title":"MechMind Documentation"},{"location":"#welcome-to-mkdocs_1","text":"","title":"Welcome to MkDocs"},{"location":"STRUCTURE/","text":"\ud83c\udf10 Estructura Final del Proyecto mechmind-dwv/ \u251c\u2500\u2500 .github/ \u2502 \u251c\u2500\u2500 workflows/ \u2502 \u2502 \u251c\u2500\u2500 codeql.yml # An\u00e1lisis de seguridad \u2502 \u2502 \u251c\u2500\u2500 docs.yml # Documentaci\u00f3n \u2502 \u2502 \u2514\u2500\u2500 stats.yml # Estad\u00edsticas \u2502 \u2514\u2500\u2500 codeql/ \u2502 \u251c\u2500\u2500 custom-queries/ # Consultas personalizadas \u2502 \u2514\u2500\u2500 config.yml # Configuraci\u00f3n \u251c\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500 es/ # Documentaci\u00f3n en espa\u00f1ol \u2502 \u251c\u2500\u2500 en/ # English docs \u2502 \u2514\u2500\u2500 assets/ \u2502 \u2514\u2500\u2500 mechmind-style.css # Estilos personalizados \u251c\u2500\u2500 projects/ \u2502 \u2514\u2500\u2500 mechbot-2x/ # Proyecto principal \u2502 \u251c\u2500\u2500 src/ \u2502 \u2514\u2500\u2500 Cargo.toml \u251c\u2500\u2500 scripts/ \u2502 \u251c\u2500\u2500 build.sh # Script de construcci\u00f3n \u2502 \u2514\u2500\u2500 deploy.sh # Despliegue autom\u00e1tico \u2514\u2500\u2500 STRUCTURE.md # Arquitectura del sistema \ud83d\udd25 Workflow Integrado ( .github/workflows/full-ci.yml ) name: \"\ud83d\ude80 MechMind Mega Pipeline\" on: push: branches: [main] schedule: - cron: '0 12 * * *' # Daily build jobs: security: name: \"\ud83d\udee1\ufe0f CodeQL Security Scan\" uses: ./.github/workflows/codeql.yml documentation: name: \"\ud83d\udcda Build Docs\" needs: security uses: ./.github/workflows/docs.yml with: lang: 'es' # Documentaci\u00f3n principal en espa\u00f1ol stats: name: \"\ud83d\udcca Update Stats\" needs: security uses: ./.github/workflows/stats.yml secrets: inherit notify: name: \"\ud83d\udce8 Notify Team\" needs: [security, documentation, stats] runs-on: ubuntu-latest steps: - name: Send report run: | echo \"\u2705 Todas las tareas completadas:\" \\ \"Security: ${{ needs.security.result }}\" \\ \"Docs: ${{ needs.documentation.result }}\" \\ \"Stats: ${{ needs.stats.result }}\" \\ | tee -a $GITHUB_STEP_SUMMARY \ud83d\udee0\ufe0f Script de Despliegue Unificado ( scripts/deploy.sh ) #!/bin/bash # Deploy MechMind System v2.0 set -eo pipefail # 1. Validar entorno check_environment() { [ -f \"STRUCTURE.md\" ] || { echo \"\u274c Error: No STRUCTURE.md found\"; exit 1; } git diff --quiet --exit-code || { echo \"\u274c Uncommitted changes\"; exit 1; } } # 2. Construir documentaci\u00f3n build_docs() { mkdir -p public/{es,en} pandoc docs/es/README.md -o public/es/index.html --template=docs/assets/template.html pandoc docs/en/README.md -o public/en/index.html --template=docs/assets/template.html } # 3. Sincronizar con GitHub Pages deploy() { gh workflow run docs.yml -f force-rebuild=true gh run watch $(gh run list -w docs.yml -L 1 --json databaseId -q '.[0].databaseId') } main() { check_environment build_docs deploy echo \"\ud83d\ude80 Despliegue completado: https://mechmind-dwv.github.io\" } main \"$@\" \ud83d\udcdc STRUCTURE.md Actualizado # \ud83e\udd16 Arquitectura MechMind-dwv v2.0 ```mermaid graph TD A[GitHub Actions] --> B[Security Scan] A --> C[Documentation] A --> D[Stats] B --> E[Notify] C --> E D --> E \ud83d\udd27 Componentes Clave Sistema de Seguridad : CodeQL con consultas personalizadas Escaneo diario autom\u00e1tico Documentaci\u00f3n Inteligente : Biling\u00fce (ES/EN) Estilos personalizados Despliegue en GitHub Pages Estad\u00edsticas en Tiempo Real : Actualizaci\u00f3n cada 6 horas Temas personalizables Integraci\u00f3n con README.md \ud83d\ude80 C\u00f3mo Contribuir # 1. Clonar repositorio git clone https://github.com/mechmind-dwv/mechmind-dwv.git # 2. Ejecutar pruebas ./scripts/build.sh # 3. Enviar cambios git push origin feature-branch // Verificaci\u00f3n del sistema fn main() { println!(\"\u2705 Sistema operativo al 100%\"); println!(\"\ud83c\udf10 Docs: https://mechmind-dwv.github.io\"); println!(\"\ud83d\udee1\ufe0f Security: CodeQL Level 5\"); } \ud83d\udd04 Proceso de Implementaci\u00f3n Actualizar estructura : mkdir -p .github/workflows docs/{es,en} scripts Copiar los archivos mostrados arriba a sus ubicaciones correspondientes Hacer commit inicial : git add . git commit -m \"\ud83d\ude80 v2.0: Implementaci\u00f3n profesional completa\" git push origin main Verificar ejecuci\u00f3n : gh run watch -w full-ci.yml Esta implementaci\u00f3n ofrece: - \u2705 Seguridad empresarial con CodeQL - \u2705 Documentaci\u00f3n profesional biling\u00fce - \u2705 Estad\u00edsticas autom\u00e1ticas - \u2705 Sistema de notificaciones - \u2705 Integraci\u00f3n perfecta con tu stack existente \u00bfNecesitas ajustar alg\u00fan componente o a\u00f1adir integraciones adicionales? \ud83d\ude0a","title":"STRUCTURE"},{"location":"STRUCTURE/#estructura-final-del-proyecto","text":"mechmind-dwv/ \u251c\u2500\u2500 .github/ \u2502 \u251c\u2500\u2500 workflows/ \u2502 \u2502 \u251c\u2500\u2500 codeql.yml # An\u00e1lisis de seguridad \u2502 \u2502 \u251c\u2500\u2500 docs.yml # Documentaci\u00f3n \u2502 \u2502 \u2514\u2500\u2500 stats.yml # Estad\u00edsticas \u2502 \u2514\u2500\u2500 codeql/ \u2502 \u251c\u2500\u2500 custom-queries/ # Consultas personalizadas \u2502 \u2514\u2500\u2500 config.yml # Configuraci\u00f3n \u251c\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500 es/ # Documentaci\u00f3n en espa\u00f1ol \u2502 \u251c\u2500\u2500 en/ # English docs \u2502 \u2514\u2500\u2500 assets/ \u2502 \u2514\u2500\u2500 mechmind-style.css # Estilos personalizados \u251c\u2500\u2500 projects/ \u2502 \u2514\u2500\u2500 mechbot-2x/ # Proyecto principal \u2502 \u251c\u2500\u2500 src/ \u2502 \u2514\u2500\u2500 Cargo.toml \u251c\u2500\u2500 scripts/ \u2502 \u251c\u2500\u2500 build.sh # Script de construcci\u00f3n \u2502 \u2514\u2500\u2500 deploy.sh # Despliegue autom\u00e1tico \u2514\u2500\u2500 STRUCTURE.md # Arquitectura del sistema","title":"\ud83c\udf10 Estructura Final del Proyecto"},{"location":"STRUCTURE/#workflow-integrado-githubworkflowsfull-ciyml","text":"name: \"\ud83d\ude80 MechMind Mega Pipeline\" on: push: branches: [main] schedule: - cron: '0 12 * * *' # Daily build jobs: security: name: \"\ud83d\udee1\ufe0f CodeQL Security Scan\" uses: ./.github/workflows/codeql.yml documentation: name: \"\ud83d\udcda Build Docs\" needs: security uses: ./.github/workflows/docs.yml with: lang: 'es' # Documentaci\u00f3n principal en espa\u00f1ol stats: name: \"\ud83d\udcca Update Stats\" needs: security uses: ./.github/workflows/stats.yml secrets: inherit notify: name: \"\ud83d\udce8 Notify Team\" needs: [security, documentation, stats] runs-on: ubuntu-latest steps: - name: Send report run: | echo \"\u2705 Todas las tareas completadas:\" \\ \"Security: ${{ needs.security.result }}\" \\ \"Docs: ${{ needs.documentation.result }}\" \\ \"Stats: ${{ needs.stats.result }}\" \\ | tee -a $GITHUB_STEP_SUMMARY","title":"\ud83d\udd25 Workflow Integrado (.github/workflows/full-ci.yml)"},{"location":"STRUCTURE/#script-de-despliegue-unificado-scriptsdeploysh","text":"#!/bin/bash # Deploy MechMind System v2.0 set -eo pipefail # 1. Validar entorno check_environment() { [ -f \"STRUCTURE.md\" ] || { echo \"\u274c Error: No STRUCTURE.md found\"; exit 1; } git diff --quiet --exit-code || { echo \"\u274c Uncommitted changes\"; exit 1; } } # 2. Construir documentaci\u00f3n build_docs() { mkdir -p public/{es,en} pandoc docs/es/README.md -o public/es/index.html --template=docs/assets/template.html pandoc docs/en/README.md -o public/en/index.html --template=docs/assets/template.html } # 3. Sincronizar con GitHub Pages deploy() { gh workflow run docs.yml -f force-rebuild=true gh run watch $(gh run list -w docs.yml -L 1 --json databaseId -q '.[0].databaseId') } main() { check_environment build_docs deploy echo \"\ud83d\ude80 Despliegue completado: https://mechmind-dwv.github.io\" } main \"$@\"","title":"\ud83d\udee0\ufe0f Script de Despliegue Unificado (scripts/deploy.sh)"},{"location":"STRUCTURE/#structuremd-actualizado","text":"# \ud83e\udd16 Arquitectura MechMind-dwv v2.0 ```mermaid graph TD A[GitHub Actions] --> B[Security Scan] A --> C[Documentation] A --> D[Stats] B --> E[Notify] C --> E D --> E","title":"\ud83d\udcdc STRUCTURE.md Actualizado"},{"location":"STRUCTURE/#componentes-clave","text":"Sistema de Seguridad : CodeQL con consultas personalizadas Escaneo diario autom\u00e1tico Documentaci\u00f3n Inteligente : Biling\u00fce (ES/EN) Estilos personalizados Despliegue en GitHub Pages Estad\u00edsticas en Tiempo Real : Actualizaci\u00f3n cada 6 horas Temas personalizables Integraci\u00f3n con README.md","title":"\ud83d\udd27 Componentes Clave"},{"location":"STRUCTURE/#como-contribuir","text":"# 1. Clonar repositorio git clone https://github.com/mechmind-dwv/mechmind-dwv.git # 2. Ejecutar pruebas ./scripts/build.sh # 3. Enviar cambios git push origin feature-branch // Verificaci\u00f3n del sistema fn main() { println!(\"\u2705 Sistema operativo al 100%\"); println!(\"\ud83c\udf10 Docs: https://mechmind-dwv.github.io\"); println!(\"\ud83d\udee1\ufe0f Security: CodeQL Level 5\"); }","title":"\ud83d\ude80 C\u00f3mo Contribuir"},{"location":"STRUCTURE/#proceso-de-implementacion","text":"Actualizar estructura : mkdir -p .github/workflows docs/{es,en} scripts Copiar los archivos mostrados arriba a sus ubicaciones correspondientes Hacer commit inicial : git add . git commit -m \"\ud83d\ude80 v2.0: Implementaci\u00f3n profesional completa\" git push origin main Verificar ejecuci\u00f3n : gh run watch -w full-ci.yml Esta implementaci\u00f3n ofrece: - \u2705 Seguridad empresarial con CodeQL - \u2705 Documentaci\u00f3n profesional biling\u00fce - \u2705 Estad\u00edsticas autom\u00e1ticas - \u2705 Sistema de notificaciones - \u2705 Integraci\u00f3n perfecta con tu stack existente \u00bfNecesitas ajustar alg\u00fan componente o a\u00f1adir integraciones adicionales? \ud83d\ude0a","title":"\ud83d\udd04 Proceso de Implementaci\u00f3n"},{"location":"doc-acces/","text":"Recurso Descripci\u00f3n Enlace API Rust Documentaci\u00f3n autom\u00e1tica del n\u00facleo Ver RustDoc Esquemas Diagramas t\u00e9cnicos del robot Explorar esquemas Ejemplos C\u00f3digo de ejemplo para API Ver ejemplos","title":"Doc acces"},{"location":"robotics/","text":"\ud83e\udd16 Estructura de docs/robotics/ (MechBot-2X) docs/ \u2514\u2500\u2500 robotics/ \u251c\u2500\u2500 schematics/ # Dise\u00f1os t\u00e9cnicos \u2502 \u251c\u2500\u2500 mechbot-v2.1.sch # KiCAD Schematic \u2502 \u2514\u2500\u2500 pcb-layout.pdf # Placa PCB \u251c\u2500\u2500 firmware/ # C\u00f3digo embebido \u2502 \u251c\u2500\u2500 src/ \u2502 \u2502 \u2514\u2500\u2500 main.rs # Firmware en Rust \u2502 \u2514\u2500\u2500 platformio.ini # Configuraci\u00f3n \u251c\u2500\u2500 simulations/ # Entornos virtuales \u2502 \u251c\u2500\u2500 gazebo/ # ROS/Gazebo \u2502 \u2514\u2500\u2500 webots/ # Webots \u251c\u2500\u2500 api/ # Documentaci\u00f3n API \u2502 \u2514\u2500\u2500 rustdoc/ # `cargo doc --open` \u2514\u2500\u2500 DATASHEET.md # Especificaciones t\u00e9cnicas \ud83d\udee0\ufe0f Archivos Clave (Con ejemplos reales) 1. DATASHEET.md (Ficha T\u00e9cnica) # \ud83d\udccb MechBot-2X Datasheet ## Especificaciones | Par\u00e1metro | Valor | |-----------------|---------------------| | CPU | ESP32-C6 (RISC-V) | | SO | ROS2 Humble | | Sensores | LiDAR RPLidar A1 | | Lenguajes | Rust (no_std) | ![Diagrama de Bloques](./schematics/block-diagram.png) 2. Firmware en Rust ( firmware/src/main.rs ) #![no_std] #![no_main] use esp32c6_hal as hal; #[entry] fn main() -> ! { let peripherals = hal::pac::Peripherals::take(); let mut led = hal::gpio::Pin::new(peripherals.pins.gpio5).into_output(); loop { led.toggle(); hal::delay::FreeRtos::delay_ms(1000); // Parpadeo ROS2-compatible } } 3. Simulaci\u00f3n en Gazebo ( simulations/gazebo/launch/ ) <!-- mechbot.launch.xml --> <launch> <node pkg=\"gazebo_ros\" type=\"spawn_model\" name=\"spawn_mechbot\" args=\"-urdf -model mechbot -param robot_description\" /> </launch> \ud83d\udd04 Automatizaci\u00f3n con GitHub Actions A\u00f1ade esto en .github/workflows/docs.yml : name: Build Robotics Docs on: [push] jobs: docs: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - name: Generate RustDoc run: | cd docs/es/docs/robotics/firmware cargo doc --no-deps mv target/doc ./api/rustdoc - name: Upload Artifacts uses: actions/upload-artifact@v3 with: name: mechbot-docs path: docs/es/docs/robotics/api/ \ud83c\udf10 C\u00f3mo Acceder Localmente : bash cd docs/es/docs/robotics/firmware cargo doc --open # Abre documentaci\u00f3n Rust En GitHub Pages : Activa GitHub Pages en settings \u2192 /docs folder URL: https://mechmind-dwv.github.io/robotics/api/rustdoc \ud83c\udfa8 Ejemplo Visual graph TB A[Firmware Rust] --> B[ROS2 Nodes] B --> C[Gazebo Sim] C --> D{Testing} D -->|Pass| E[Deploy to PCB] D -->|Fail| F[Debug en VSCode] \u00bfQu\u00e9 m\u00e1s necesitas? \u00bfQuieres: - [ ] Diagramas interactivos con Draw.io - [ ] Tutoriales en Jupyter Notebooks - [ ] Integraci\u00f3n con PlatformIO Cloud \u00a1Dime y lo implementamos! \ud83d\ude80 ```rust // \u00a1Tu documentaci\u00f3n siempre actualizada! fn main() { println!(\"Documentaci\u00f3n viva en ./docs/es/docs/robotics/\"); }","title":"\ud83e\udd16 Estructura de docs/robotics/ (MechBot-2X)"},{"location":"robotics/#estructura-de-docsrobotics-mechbot-2x","text":"docs/ \u2514\u2500\u2500 robotics/ \u251c\u2500\u2500 schematics/ # Dise\u00f1os t\u00e9cnicos \u2502 \u251c\u2500\u2500 mechbot-v2.1.sch # KiCAD Schematic \u2502 \u2514\u2500\u2500 pcb-layout.pdf # Placa PCB \u251c\u2500\u2500 firmware/ # C\u00f3digo embebido \u2502 \u251c\u2500\u2500 src/ \u2502 \u2502 \u2514\u2500\u2500 main.rs # Firmware en Rust \u2502 \u2514\u2500\u2500 platformio.ini # Configuraci\u00f3n \u251c\u2500\u2500 simulations/ # Entornos virtuales \u2502 \u251c\u2500\u2500 gazebo/ # ROS/Gazebo \u2502 \u2514\u2500\u2500 webots/ # Webots \u251c\u2500\u2500 api/ # Documentaci\u00f3n API \u2502 \u2514\u2500\u2500 rustdoc/ # `cargo doc --open` \u2514\u2500\u2500 DATASHEET.md # Especificaciones t\u00e9cnicas","title":"\ud83e\udd16 Estructura de docs/robotics/ (MechBot-2X)"},{"location":"robotics/#archivos-clave-con-ejemplos-reales","text":"","title":"\ud83d\udee0\ufe0f Archivos Clave (Con ejemplos reales)"},{"location":"robotics/#1-datasheetmd-ficha-tecnica","text":"# \ud83d\udccb MechBot-2X Datasheet ## Especificaciones | Par\u00e1metro | Valor | |-----------------|---------------------| | CPU | ESP32-C6 (RISC-V) | | SO | ROS2 Humble | | Sensores | LiDAR RPLidar A1 | | Lenguajes | Rust (no_std) | ![Diagrama de Bloques](./schematics/block-diagram.png)","title":"1. DATASHEET.md (Ficha T\u00e9cnica)"},{"location":"robotics/#2-firmware-en-rust-firmwaresrcmainrs","text":"#![no_std] #![no_main] use esp32c6_hal as hal; #[entry] fn main() -> ! { let peripherals = hal::pac::Peripherals::take(); let mut led = hal::gpio::Pin::new(peripherals.pins.gpio5).into_output(); loop { led.toggle(); hal::delay::FreeRtos::delay_ms(1000); // Parpadeo ROS2-compatible } }","title":"2. Firmware en Rust (firmware/src/main.rs)"},{"location":"robotics/#3-simulacion-en-gazebo-simulationsgazebolaunch","text":"<!-- mechbot.launch.xml --> <launch> <node pkg=\"gazebo_ros\" type=\"spawn_model\" name=\"spawn_mechbot\" args=\"-urdf -model mechbot -param robot_description\" /> </launch>","title":"3. Simulaci\u00f3n en Gazebo (simulations/gazebo/launch/)"},{"location":"robotics/#automatizacion-con-github-actions","text":"A\u00f1ade esto en .github/workflows/docs.yml : name: Build Robotics Docs on: [push] jobs: docs: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - name: Generate RustDoc run: | cd docs/es/docs/robotics/firmware cargo doc --no-deps mv target/doc ./api/rustdoc - name: Upload Artifacts uses: actions/upload-artifact@v3 with: name: mechbot-docs path: docs/es/docs/robotics/api/","title":"\ud83d\udd04 Automatizaci\u00f3n con GitHub Actions"},{"location":"robotics/#como-acceder","text":"Localmente : bash cd docs/es/docs/robotics/firmware cargo doc --open # Abre documentaci\u00f3n Rust En GitHub Pages : Activa GitHub Pages en settings \u2192 /docs folder URL: https://mechmind-dwv.github.io/robotics/api/rustdoc","title":"\ud83c\udf10 C\u00f3mo Acceder"},{"location":"robotics/#ejemplo-visual","text":"graph TB A[Firmware Rust] --> B[ROS2 Nodes] B --> C[Gazebo Sim] C --> D{Testing} D -->|Pass| E[Deploy to PCB] D -->|Fail| F[Debug en VSCode] \u00bfQu\u00e9 m\u00e1s necesitas? \u00bfQuieres: - [ ] Diagramas interactivos con Draw.io - [ ] Tutoriales en Jupyter Notebooks - [ ] Integraci\u00f3n con PlatformIO Cloud \u00a1Dime y lo implementamos! \ud83d\ude80 ```rust // \u00a1Tu documentaci\u00f3n siempre actualizada! fn main() { println!(\"Documentaci\u00f3n viva en ./docs/es/docs/robotics/\"); }","title":"\ud83c\udfa8 Ejemplo Visual"},{"location":"robotics/DATASHEET/","text":"\ud83d\udccb MechBot-2X Datasheet Especificaciones Par\u00e1metro Valor CPU ESP32-C6 (RISC-V) SO ROS2 Humble Sensores LiDAR RPLidar A1 Lenguajes Rust (no_std)","title":"\ud83d\udccb MechBot-2X Datasheet"},{"location":"robotics/DATASHEET/#mechbot-2x-datasheet","text":"","title":"\ud83d\udccb MechBot-2X Datasheet"},{"location":"robotics/DATASHEET/#especificaciones","text":"Par\u00e1metro Valor CPU ESP32-C6 (RISC-V) SO ROS2 Humble Sensores LiDAR RPLidar A1 Lenguajes Rust (no_std)","title":"Especificaciones"},{"location":"robotics/api/","text":"1. Documentaci\u00f3n con Estilo docs/robotics/api/ : Documentaci\u00f3n que brilla m\u00e1s que tu pantalla a medianoche Ejemplos que hasta el CEO entender\u00eda (quiz\u00e1s) schematics/ : Diagramas dibujados con el amor de 1000 soles Protocolos de comunicaci\u00f3n m\u00e1s organizados que tu nevera","title":"Index"},{"location":"robotics/api/#1-documentacion-con-estilo","text":"docs/robotics/api/ : Documentaci\u00f3n que brilla m\u00e1s que tu pantalla a medianoche Ejemplos que hasta el CEO entender\u00eda (quiz\u00e1s) schematics/ : Diagramas dibujados con el amor de 1000 soles Protocolos de comunicaci\u00f3n m\u00e1s organizados que tu nevera","title":"1. Documentaci\u00f3n con Estilo"},{"location":"robotics/api/STRUCTURE/","text":"\ud83e\udd16 Estructura de docs/robotics/ (MechBot-2X) docs/ \u2514\u2500\u2500 robotics/ \u251c\u2500\u2500 schematics/ # Dise\u00f1os t\u00e9cnicos \u2502 \u251c\u2500\u2500 mechbot-v2.1.sch # KiCAD Schematic \u2502 \u2514\u2500\u2500 pcb-layout.pdf # Placa PCB \u251c\u2500\u2500 firmware/ # C\u00f3digo embebido \u2502 \u251c\u2500\u2500 src/ \u2502 \u2502 \u2514\u2500\u2500 main.rs # Firmware en Rust \u2502 \u2514\u2500\u2500 platformio.ini # Configuraci\u00f3n \u251c\u2500\u2500 simulations/ # Entornos virtuales \u2502 \u251c\u2500\u2500 gazebo/ # ROS/Gazebo \u2502 \u2514\u2500\u2500 webots/ # Webots \u251c\u2500\u2500 api/ # Documentaci\u00f3n API \u2502 \u2514\u2500\u2500 rustdoc/ # `cargo doc --open` \u2514\u2500\u2500 DATASHEET.md # Especificaciones t\u00e9cnicas","title":"\ud83e\udd16 Estructura de docs/robotics/ (MechBot-2X)"},{"location":"robotics/api/STRUCTURE/#estructura-de-docsrobotics-mechbot-2x","text":"docs/ \u2514\u2500\u2500 robotics/ \u251c\u2500\u2500 schematics/ # Dise\u00f1os t\u00e9cnicos \u2502 \u251c\u2500\u2500 mechbot-v2.1.sch # KiCAD Schematic \u2502 \u2514\u2500\u2500 pcb-layout.pdf # Placa PCB \u251c\u2500\u2500 firmware/ # C\u00f3digo embebido \u2502 \u251c\u2500\u2500 src/ \u2502 \u2502 \u2514\u2500\u2500 main.rs # Firmware en Rust \u2502 \u2514\u2500\u2500 platformio.ini # Configuraci\u00f3n \u251c\u2500\u2500 simulations/ # Entornos virtuales \u2502 \u251c\u2500\u2500 gazebo/ # ROS/Gazebo \u2502 \u2514\u2500\u2500 webots/ # Webots \u251c\u2500\u2500 api/ # Documentaci\u00f3n API \u2502 \u2514\u2500\u2500 rustdoc/ # `cargo doc --open` \u2514\u2500\u2500 DATASHEET.md # Especificaciones t\u00e9cnicas","title":"\ud83e\udd16 Estructura de docs/robotics/ (MechBot-2X)"},{"location":"robotics/api/documentacion/","text":"\ud83d\udcda Documentaci\u00f3n del Proyecto MechBot \ud83d\udd0d Acceso R\u00e1pido Recurso Descripci\u00f3n Enlace API Rust Documentaci\u00f3n autom\u00e1tica del n\u00facleo Ver RustDoc Esquemas Diagramas t\u00e9cnicos del robot Explorar esquemas Ejemplos C\u00f3digo de ejemplo para API Ver ejemplos","title":"Documentacion"},{"location":"robotics/api/documentacion/#documentacion-del-proyecto-mechbot","text":"","title":"\ud83d\udcda Documentaci\u00f3n del Proyecto MechBot"},{"location":"robotics/api/documentacion/#acceso-rapido","text":"Recurso Descripci\u00f3n Enlace API Rust Documentaci\u00f3n autom\u00e1tica del n\u00facleo Ver RustDoc Esquemas Diagramas t\u00e9cnicos del robot Explorar esquemas Ejemplos C\u00f3digo de ejemplo para API Ver ejemplos","title":"\ud83d\udd0d Acceso R\u00e1pido"},{"location":"robotics/api/schematics/","text":"\ud83c\udf1f Visualizaci\u00f3n en README **Consejos Pro**: 1. Usa capas en DrawIO para diagramas complejos 2. Mant\u00e9n un `CHANGELOG.md` en la carpeta para versionar cambios 3. Integra con PlantUML para diagramas generados desde c\u00f3digo: ```plantuml @startuml component \"MechBot CPU\" as core component \"Sensors\" as sensors core --> sensors : I2C @enduml \u00bfNecesitas ayuda para: - [ ] Convertir diagramas a formatos m\u00f3viles - [ ] Automatizar validaciones t\u00e9cnicas - [ ] Integrar con documentaci\u00f3n ROS2? \u00a1Estoy lista para ayudar! \ud83e\udd16\ud83d\udca1 ```rust // Funci\u00f3n de verificaci\u00f3n fn verify_diagrams() -> Result<(), &'static str> { println!(\"\u2705 Diagramas ubicados en: docs/robotics/api/schematics/\"); Ok(()) }","title":"Index"},{"location":"robotics/api/schematics/#visualizacion-en-readme","text":"**Consejos Pro**: 1. Usa capas en DrawIO para diagramas complejos 2. Mant\u00e9n un `CHANGELOG.md` en la carpeta para versionar cambios 3. Integra con PlantUML para diagramas generados desde c\u00f3digo: ```plantuml @startuml component \"MechBot CPU\" as core component \"Sensors\" as sensors core --> sensors : I2C @enduml \u00bfNecesitas ayuda para: - [ ] Convertir diagramas a formatos m\u00f3viles - [ ] Automatizar validaciones t\u00e9cnicas - [ ] Integrar con documentaci\u00f3n ROS2? \u00a1Estoy lista para ayudar! \ud83e\udd16\ud83d\udca1 ```rust // Funci\u00f3n de verificaci\u00f3n fn verify_diagrams() -> Result<(), &'static str> { println!(\"\u2705 Diagramas ubicados en: docs/robotics/api/schematics/\"); Ok(()) }","title":"\ud83c\udf1f Visualizaci\u00f3n en README"},{"location":"robotics/api/schematics/STRUCTURE/","text":"\ud83d\udcc2 Estructura de Archivos ```bash schematics/ \u251c\u2500\u2500 mechbot-architecture.drawio # Diagrama principal \u251c\u2500\u2500 communication-protocol.pdf # Protocolo firmado \u251c\u2500\u2500 power-distribution.svg # Flujo de energ\u00eda \u2514\u2500\u2500 kinematic-diagram.png # Cinem\u00e1tica del robot","title":"STRUCTURE"},{"location":"robotics/api/schematics/STRUCTURE/#estructura-de-archivos","text":"```bash schematics/ \u251c\u2500\u2500 mechbot-architecture.drawio # Diagrama principal \u251c\u2500\u2500 communication-protocol.pdf # Protocolo firmado \u251c\u2500\u2500 power-distribution.svg # Flujo de energ\u00eda \u2514\u2500\u2500 kinematic-diagram.png # Cinem\u00e1tica del robot","title":"\ud83d\udcc2 Estructura de Archivos"},{"location":"robotics/api/schematics/cocommunication-protocol/","text":"2. Protocolo de Comunicaci\u00f3n ( communication-protocol.pdf ) %% Ejemplo del protocolo sequenceDiagram MechBot->>ROS2: /cmd_vel (Twist) ROS2->>ESP32: Serial@115200bps ESP32-->>Sensors: I2C Request \ud83d\udee0\ufe0f C\u00f3mo Actualizar Diagramas Para .drawio : bash apt install draw.io-desktop # Linux brew install --cask drawio # macOS Generar PDFs : bash drawio -x -f pdf -o protocol.pdf architecture.drawio \ud83d\udd04 Integraci\u00f3n Automatizada A\u00f1ade este workflow en .github/workflows/schematics.yml : name: Update Diagrams on: push: paths: - 'docs/robotics/api/schematics/*.drawio' jobs: convert: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - name: Convert to PDF uses: docker://jgraph/drawio with: args: --export --format pdf --output schematics/communication-protocol.pdf schematics/mechbot-architecture.drawio - name: Commit changes run: | git config --global user.name \"MechBot Diagrams Bot\" git add schematics/ git commit -m \"\ud83d\udd04 Auto-update diagrams\" git push \ud83c\udf1f Visualizaci\u00f3n en README [![Arquitectura](docs/robotics/api/schematics/preview-architecture.png)](docs/robotics/api/schematics/mechbot-architecture.drawio) Consejos Pro : 1. Usa capas en DrawIO para diagramas complejos 2. Mant\u00e9n un CHANGELOG.md en la carpeta para versionar cambios 3. Integra con PlantUML para diagramas generados desde c\u00f3digo: @startuml component \"MechBot CPU\" as core component \"Sensors\" as sensors core --> sensors : I2C @enduml \u00bfNecesitas ayuda para: - [ ] Convertir diagramas a formatos m\u00f3viles - [ ] Automatizar validaciones t\u00e9cnicas - [ ] Integrar con documentaci\u00f3n ROS2? \u00a1Estoy lista para ayudar! \ud83e\udd16\ud83d\udca1 ```rust // Funci\u00f3n de verificaci\u00f3n fn verify_diagrams() -> Result<(), &'static str> { println!(\"\u2705 Diagramas ubicados en: docs/robotics/api/schematics/\"); Ok(()) }","title":"Cocommunication protocol"},{"location":"robotics/api/schematics/cocommunication-protocol/#2-protocolo-de-comunicacion-communication-protocolpdf","text":"%% Ejemplo del protocolo sequenceDiagram MechBot->>ROS2: /cmd_vel (Twist) ROS2->>ESP32: Serial@115200bps ESP32-->>Sensors: I2C Request","title":"2. Protocolo de Comunicaci\u00f3n (communication-protocol.pdf)"},{"location":"robotics/api/schematics/cocommunication-protocol/#como-actualizar-diagramas","text":"Para .drawio : bash apt install draw.io-desktop # Linux brew install --cask drawio # macOS Generar PDFs : bash drawio -x -f pdf -o protocol.pdf architecture.drawio","title":"\ud83d\udee0\ufe0f C\u00f3mo Actualizar Diagramas"},{"location":"robotics/api/schematics/cocommunication-protocol/#integracion-automatizada","text":"A\u00f1ade este workflow en .github/workflows/schematics.yml : name: Update Diagrams on: push: paths: - 'docs/robotics/api/schematics/*.drawio' jobs: convert: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - name: Convert to PDF uses: docker://jgraph/drawio with: args: --export --format pdf --output schematics/communication-protocol.pdf schematics/mechbot-architecture.drawio - name: Commit changes run: | git config --global user.name \"MechBot Diagrams Bot\" git add schematics/ git commit -m \"\ud83d\udd04 Auto-update diagrams\" git push","title":"\ud83d\udd04 Integraci\u00f3n Automatizada"},{"location":"robotics/api/schematics/cocommunication-protocol/#visualizacion-en-readme","text":"[![Arquitectura](docs/robotics/api/schematics/preview-architecture.png)](docs/robotics/api/schematics/mechbot-architecture.drawio) Consejos Pro : 1. Usa capas en DrawIO para diagramas complejos 2. Mant\u00e9n un CHANGELOG.md en la carpeta para versionar cambios 3. Integra con PlantUML para diagramas generados desde c\u00f3digo: @startuml component \"MechBot CPU\" as core component \"Sensors\" as sensors core --> sensors : I2C @enduml \u00bfNecesitas ayuda para: - [ ] Convertir diagramas a formatos m\u00f3viles - [ ] Automatizar validaciones t\u00e9cnicas - [ ] Integrar con documentaci\u00f3n ROS2? \u00a1Estoy lista para ayudar! \ud83e\udd16\ud83d\udca1 ```rust // Funci\u00f3n de verificaci\u00f3n fn verify_diagrams() -> Result<(), &'static str> { println!(\"\u2705 Diagramas ubicados en: docs/robotics/api/schematics/\"); Ok(()) }","title":"\ud83c\udf1f Visualizaci\u00f3n en README"},{"location":"robotics/api/schematics/versiones/CHANGELOG/","text":"```plantuml @startuml component \"MechBot CPU\" as core component \"Sensors\" as sensors core --> sensors : I2C @enduml","title":"CHANGELOG"}]}