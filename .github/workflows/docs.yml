name: "üìú MechMind Documentation Engine"

# ======================
# üîê PERMISOS DE SEGURIDAD
# ======================
permissions:
  contents: read      # Acceso m√≠nimo al c√≥digo
  pages: write        # Despliegue en GitHub Pages
  id-token: write     # Autenticaci√≥n OIDC segura
  deployments: write  # Para seguimiento de despliegues
name: Build Robotics Docs
on: push

# ======================
# üïí DISPARADORES
# ======================
on:
  push:
    branches: [ "main" ]
    paths:
      - 'docs/**'
      - 'projects/mechbot-2x/src/**'
  workflow_dispatch:
    inputs:
      force-rebuild:
        description: 'Reconstruir completamente'
        required: false
        type: boolean

# ======================
# üèóÔ∏è CONFIGURACI√ìN GLOBAL
# ======================
env:
  RUST_VERSION: "nightly-2024-03-01"
  DOCS_DIR: "docs/robotics/api"

# ======================
# üõ†Ô∏è JOBS PRINCIPALES
# ======================
jobs:
  documentation:
    name: "üìö Generar Documentaci√≥n"
    runs-on: ubuntu-latest
    container:
      image: rustlang/rust:${{ env.RUST_VERSION }}
      options: --privileged
      
      # Requerido para algunos crates
 steps:
      - uses: actions/checkout@v4
      
      - name: Generate RustDoc
        run: |
          cd docs/robotics/firmware
          cargo doc --no-deps
          mv target/doc ./api/rustdoc

    # ======================
    # üåê ENTORNO DE EJECUCI√ìN
    # ======================
    environment:
      name: mechmind-docs
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      # ======================
      # 1. PREPARACI√ìN
      # ======================
      - name: "üõ∏ Checkout del C√≥digo"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          persist-credentials: false

      # ======================
      # 2. CONFIGURACI√ìN RUST
      # ======================
      - name: "‚öôÔ∏è Configurar Toolchain"
        run: |
          rustup component add rust-docs
          rustup target add wasm32-unknown-unknown
          echo "CARGO_TARGET_DIR=./target-docs" >> $GITHUB_ENV

      # ======================
      # 3. GENERACI√ìN DE DOCS
      # ======================
      - name: "ü¶Ä Generar RustDoc Avanzado"
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          cargo doc \
            --no-deps \
            --document-private-items \
            --all-features \
            --target-dir ${{ env.CARGO_TARGET_DIR }} \
            --offline
       
       - name: mechbot-docs
          path: docs/robotics/api/
          
          # Post-procesamiento de docs
          find target-docs/doc -name "*.html" -exec \
            sed -i 's/<body>/<body class="mechmind-theme">/g' {} \;

      # ======================
      # 4. CONTROL DE CALIDAD
      # ======================
      - name: "üîç Validar Documentaci√≥n"
        run: |
          # Verificar links rotos
          pip install linkchecker
          linkchecker ${{ env.DOCS_DIR }}/target-docs/doc

      # ======================
      # 5. DESPLIEGUE
      # ======================
      - name: "üöÄ Desplegar en GitHub Pages"
        uses: actions/deploy-pages@v4
        id: deployment
        with:
          token: ${{ secrets.MECHMIND_DEPLOY_KEY }}
          target-branch: gh-pages
          publish-dir: ${{ env.DOCS_DIR }}/target-docs/doc
          environment-name: mechmind-docs

      # ======================
      # 6. NOTIFICACIONES
      # ======================
      - name: "üì® Notificar Equipo"
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üìö Documentaci√≥n actualizada: ${process.env.DOCS_VERSION}\nüåê Vista previa: ${{ steps.deployment.outputs.page_url }}`
            })
