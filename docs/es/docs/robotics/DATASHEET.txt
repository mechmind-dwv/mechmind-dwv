# 🤖 **Estructura de docs/robotics/** (MechBot-2X)

```bash
docs/
└── robotics/
    ├── schematics/               # Diseños técnicos
    │   ├── mechbot-v2.1.sch      # KiCAD Schematic
    │   └── pcb-layout.pdf        # Placa PCB
    ├── firmware/                 # Código embebido
    │   ├── src/
    │   │   └── main.rs           # Firmware en Rust
    │   └── platformio.ini        # Configuración
    ├── simulations/              # Entornos virtuales
    │   ├── gazebo/               # ROS/Gazebo
    │   └── webots/               # Webots
    ├── api/                     # Documentación API
    │   └── rustdoc/              # `cargo doc --open`
    └── DATASHEET.md              # Especificaciones técnicas
```

---

## 🛠️ **Archivos Clave** (Con ejemplos reales)

### 1. **DATASHEET.md** (Ficha Técnica)
```markdown
# 📋 MechBot-2X Datasheet

## Especificaciones
| Parámetro       | Valor               |
|-----------------|---------------------|
| CPU             | ESP32-C6 (RISC-V)   |
| SO              | ROS2 Humble         |
| Sensores        | LiDAR RPLidar A1    |
| Lenguajes       | Rust (no_std)       |

![Diagrama de Bloques](./schematics/block-diagram.png)
```

### 2. **Firmware en Rust** (`firmware/src/main.rs`)
```rust
#![no_std]
#![no_main]

use esp32c6_hal as hal;

#[entry]
fn main() -> ! {
    let peripherals = hal::pac::Peripherals::take();
    let mut led = hal::gpio::Pin::new(peripherals.pins.gpio5).into_output();

    loop {
        led.toggle();
        hal::delay::FreeRtos::delay_ms(1000); // Parpadeo ROS2-compatible
    }
}
```

### 3. **Simulación en Gazebo** (`simulations/gazebo/launch/`)
```xml
<!-- mechbot.launch.xml -->
<launch>
    <node pkg="gazebo_ros" type="spawn_model" name="spawn_mechbot"
          args="-urdf -model mechbot -param robot_description" />
</launch>
```

---

## 🔄 **Automatización con GitHub Actions**
Añade esto en `.github/workflows/docs.yml`:
```yaml
name: Build Robotics Docs
on: [push]

jobs:
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate RustDoc
        run: |
          cd docs/es/docs/robotics/firmware
          cargo doc --no-deps
          mv target/doc ./api/rustdoc

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mechbot-docs
          path: docs/es/docs/robotics/api/
```

---

## 🌐 **Cómo Acceder**
1. **Localmente**:
   ```bash
   cd docs/es/docs/robotics/firmware
   cargo doc --open  # Abre documentación Rust
   ```
2. **En GitHub Pages**:
   - Activa GitHub Pages en settings → `/docs` folder
   - URL: `https://mechmind-dwv.github.io/robotics/api/rustdoc`

---

## 🎨 **Ejemplo Visual**
```mermaid
graph TB
    A[Firmware Rust] --> B[ROS2 Nodes]
    B --> C[Gazebo Sim]
    C --> D{Testing}
    D -->|Pass| E[Deploy to PCB]
    D -->|Fail| F[Debug en VSCode]
```

**¿Qué más necesitas?** ¿Quieres:
- [ ] Diagramas interactivos con [Draw.io](https://app.diagrams.net/)
- [ ] Tutoriales en Jupyter Notebooks
- [ ] Integración con PlatformIO Cloud

¡Dime y lo implementamos! 🚀 

```rust
// ¡Tu documentación siempre actualizada!
fn main() {
    println!("Documentación viva en ./docs/robotics/");
}
